/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   push_comment.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: clourenc  <clourenc@student.42sp.org.br    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/11/30 21:26:00 by clourenc          #+#    #+#             */
/*   Updated: 2023/01/14 03:56:46 by clourenc         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

//  uma struct (estrutura) é uma coleção de variáveis agrupadas sob um único nome. 
//  Elas são usadas para representar dados compostos, como objetos ou entidades que
//   possuem vários atributos.

A sintaxe para criar uma struct é:
struct nomeDaStruct
{
    tipo_de_dado nome_da_variável1;
    tipo_de_dado nome_da_variável2;
    ...
    tipo_de_dado nome_da_variávelN;
}

// Por exemplo, você pode criar uma struct para representar um ponto cartesiano com as coordenadas x e y:

struct Ponto
{
    int x;
    int y;
}

// Para criar uma instância de uma struct, você pode usar a seguinte sintaxe:

struct nomeDaStruct nomeDaInstancia;

// Para acessar os atributos de uma struct, você pode usar o operador de acesso de estrutura "."

struct Ponto p;
p.x = 5;
p.y = 10;

// Em push_swap, uma struct pode ser usada para representar uma pilha. 
// A struct pode conter informações sobre o tamanho da pilha, o ponteiro
//  para o topo da pilha e um vetor para armazenar os elementos da pilha.

// Você pode criar uma struct para representar uma pilha e usá-la nas funções
//  de manipulação de pilha, ao invés de usar variáveis separadas para armazenar
//   informações sobre a pilha. Isso pode tornar o código mais organizado e fácil de entender.

struct Stack
{
    int size;
    int top;
    int *items;
}

// aí você pode criar funções para manipular as pilhas e acessar as informações contidas na struct,
//  como adicionar elementos, remover elementos, verificar se a pilha está vazia e outras operações.

//  aplicar uma struct para representar as pilhas "a" e "b" no programa push_swap:

#define MAX_SIZE 100

struct Stack {
    int size;
    int top;
    int items[MAX_SIZE];
};

//Função para criar uma nova pilha
struct Stack create_stack() {
    struct Stack stack;
    stack.size = MAX_SIZE;
    stack.top = -1;
    return stack;
}

//Função para verificar se a pilha está vazia
int is_empty(struct Stack stack) {
    return stack.top == -1;
}

//Função para adicionar um elemento à pilha
void push(struct Stack *stack, int item) {
    if (stack->top == stack->size - 1) {
        printf("Error: Stack overflow\n");
        return;
    }
    stack->items[++stack->top] = item;
}

//Função para remover um elemento da pilha
int pop(struct Stack *stack) {
    if (is_empty(*stack)) {
        printf("Error: Stack underflow\n");
        return -1;
    }
    return stack->items[stack->top--];
}

//Função para obter o elemento no topo da pilha
int peek(struct Stack stack) {
    if (is_empty(stack)) {
        printf("Error: Stack underflow\n");
        return -1;
    }
    return stack.items[stack.top];
}

int main() {
    struct Stack stack_a = create_stack();
    struct Stack stack_b = create_stack();
    int i;
    int numbers[] = {5, 4, 1, 3, 2};
    int size = sizeof(numbers) / sizeof(numbers[0]);
    for (i = 0; i < size; i++) {
        push(&stack_a, numbers[i]);
    }
    while (!is_empty(stack_a)) {
        int item = pop(&stack_a);
        printf("%d ", item);
    }
    return 0;
}

a struct "Stack" é usada para representar as pilhas "a" e "b". As funções "create_stack()",
 "is_empty()", "push()", "pop()" e "peek()" são usadas para criar, verificar se a pilha está vazia,
  adicionar elementos, remover elementos e obter o elemento no topo da pilha, respectivamente. 
  Elas são utilizadas para implementar as operações sa, sb, ss, pa, pb, ra, rb, rra, rrb e rrr.

No main, criamos duas instâncias da struct, stack_a e stack_b, e inserimos elementos na pilha "a" e
 imprimimos seus elementos.
